/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/Application.java to edit this template
 */
package Client;


import java.io.File;
import java.io.FileInputStream;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManagerFactory;
import javax.net.ssl.SSLContext;
import java.security.KeyStore;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
/**
 *
 * @author Admin
 */
public class Client extends javax.swing.JFrame {

    /**
     * Creates new form Client
     * 
     */
    private java.net.Socket socket;
    private java.util.Map<String, javax.swing.JFrame> downloadFrames = new java.util.HashMap<>();
    private String defaultDownloadPath = System.getProperty("user.home") + File.separator + "Downloads";
    private javax.swing.JFrame pathConfigFrame;
    private javax.swing.JTextField pathTextField;
    
    private String truststorePath = "";
    private String truststorePassword = "";
    
    // ExecutorService duy nhất, khởi tạo với 50 thread
    private ExecutorService downloadExecutor = Executors.newFixedThreadPool(50);

    public Client() {
        initComponents();
        initPathConfigFrame();
        // Đảm bảo thread pool được shutdown khi thoát
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            downloadExecutor.shutdown();
            try {
                if (!downloadExecutor.awaitTermination(5, TimeUnit.SECONDS)) {
                    downloadExecutor.shutdownNow();
                }
            } catch (InterruptedException e) {
                downloadExecutor.shutdownNow();
            }
        }));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPreferenceFrame = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jServerIPField = new javax.swing.JTextField();
        jPortField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jItemList = new javax.swing.JList<>();
        jDownloadButton = new javax.swing.JButton();
        jConnectButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jNoficationArea = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        jConnectionMenuItem = new javax.swing.JMenuItem();
        jPathMenuItem = new javax.swing.JMenuItem();
        jKeyCAMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        jPreferenceFrame.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPreferenceFrame.setResizable(false);

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jToggleButton1.setText("Connection");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToggleButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToggleButton1)
                .addContainerGap(101, Short.MAX_VALUE))
        );

        jServerIPField.setText("localhost");
        jServerIPField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jServerIPFieldActionPerformed(evt);
            }
        });

        jPortField.setText("2222");
        jPortField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPortFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("Enter port :");

        jLabel4.setText("Enter Server IP :");

        javax.swing.GroupLayout jPreferenceFrameLayout = new javax.swing.GroupLayout(jPreferenceFrame.getContentPane());
        jPreferenceFrame.getContentPane().setLayout(jPreferenceFrameLayout);
        jPreferenceFrameLayout.setHorizontalGroup(
            jPreferenceFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPreferenceFrameLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addGroup(jPreferenceFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2))
                .addGroup(jPreferenceFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPreferenceFrameLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jPortField, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPreferenceFrameLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jServerIPField)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPreferenceFrameLayout.setVerticalGroup(
            jPreferenceFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPreferenceFrameLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPreferenceFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPortField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPreferenceFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jServerIPField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocation(new java.awt.Point(0, 0));
        setResizable(false);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("List:");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Client");

        jItemList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Nothing !" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jItemList);

        jDownloadButton.setText("Download");
        jDownloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDownloadButtonActionPerformed(evt);
            }
        });

        jConnectButton.setText("Connect");
        jConnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jConnectButtonActionPerformed(evt);
            }
        });

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Date", "Path", "State", "Download Speed"
            }
        ));
        jTable1.setNextFocusableComponent(this);
        jTable1.setShowGrid(false);
        jScrollPane2.setViewportView(jTable1);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jNoficationArea.setEditable(false);
        jNoficationArea.setBackground(new java.awt.Color(51, 51, 51));
        jNoficationArea.setColumns(1);
        jNoficationArea.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jNoficationArea.setForeground(new java.awt.Color(255, 255, 255));
        jNoficationArea.setRows(5);
        jNoficationArea.setAlignmentX(1.0F);
        jNoficationArea.setAlignmentY(1.0F);
        jNoficationArea.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jNoficationArea.setDebugGraphicsOptions(javax.swing.DebugGraphics.LOG_OPTION);
        jNoficationArea.setMargin(new java.awt.Insets(0, 6, 2, 6));
        jScrollPane1.setViewportView(jNoficationArea);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        jConnectionMenuItem.setMnemonic('t');
        jConnectionMenuItem.setText("Connection");
        jConnectionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jConnectionMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(jConnectionMenuItem);

        jPathMenuItem.setText("Saving Path");
        jPathMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPathMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(jPathMenuItem);

        jKeyCAMenuItem.setText("Key CA");
        jKeyCAMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jKeyCAMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(jKeyCAMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jDownloadButton)
                        .addGap(19, 19, 19))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jConnectButton)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jConnectButton))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jDownloadButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jPortFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPortFieldActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jPortFieldActionPerformed

    private void jConnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jConnectButtonActionPerformed
        String portText = jPortField.getText();
        String ipText = jServerIPField.getText();
        try {
            int port = Integer.parseInt(portText);
            socket = createSSLSocket(ipText, port);
            jNoficationArea.append("Connected to " + ipText + " : " + port + " (TLS)\n");

            // Nhận danh sách file từ server (dữ liệu đã được giải mã tự động)
            java.io.InputStream is = socket.getInputStream();
            java.util.Scanner scanner = new java.util.Scanner(is).useDelimiter("\\A");
            String fileList = scanner.hasNext() ? scanner.next() : "";
            scanner.close();

            // Khi nhận danh sách file từ server, chỉ show file thực sự tồn tại (server đã kiểm tra)
            javax.swing.DefaultListModel<String> model = new javax.swing.DefaultListModel<>();
            for (String file : fileList.split("\\r?\\n")) {
                if (!file.trim().isEmpty()) {
                    model.addElement(file);
                }
            }
            jItemList.setModel(model);

            jNoficationArea.append("Đã kết nối thành công! Danh sách file chỉ hiển thị file thực sự tồn tại trên server.\n");

            // XÓA chức năng tự động refresh danh sách file mỗi 5 giây
            // if (refreshTimer != null) refreshTimer.stop();
            // refreshTimer = new javax.swing.Timer(5000, e -> refreshFileListFromServer());
            // refreshTimer.start();

        } catch (NumberFormatException ex) {
            jNoficationArea.append("Invalid port number!\n");
        } catch (java.io.IOException ex) {
            jNoficationArea.append("Could not connect to " + ipText + ":" + portText + " (TLS)\n");
            jNoficationArea.append("Lỗi: " + ex.getMessage() + "\n");
        } catch (Exception ex) {
            jNoficationArea.append("TLS error: " + ex.getMessage() + "\n");
        }
    }//GEN-LAST:event_jConnectButtonActionPerformed

    private void jServerIPFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jServerIPFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jServerIPFieldActionPerformed

    private void jDownloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDownloadButtonActionPerformed
        java.util.List<String> selectedFiles = jItemList.getSelectedValuesList();
        if (selectedFiles == null || selectedFiles.isEmpty()) {
            jNoficationArea.append("Please select file(s) to download.\n");
            return;
        }
        File selectedDir = new File(defaultDownloadPath);
        int result = JFileChooser.APPROVE_OPTION;
        if (!selectedDir.exists() || !selectedDir.isDirectory()) {
            int option = javax.swing.JOptionPane.showConfirmDialog(
                this,
                "Default download location not found.\nDo you want to choose a different location?",
                "Download Location",
                javax.swing.JOptionPane.YES_NO_OPTION
            );
            if (option == javax.swing.JOptionPane.YES_OPTION) {
                JFileChooser chooser = new JFileChooser();
                chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                result = chooser.showSaveDialog(this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    selectedDir = chooser.getSelectedFile();
                    option = javax.swing.JOptionPane.showConfirmDialog(
                        this,
                        "Do you want to make this the new default download location?",
                        "Set Default Location",
                        javax.swing.JOptionPane.YES_NO_OPTION
                    );
                    if (option == javax.swing.JOptionPane.YES_OPTION) {
                        defaultDownloadPath = selectedDir.getAbsolutePath();
                        if (pathTextField != null) {
                            pathTextField.setText(defaultDownloadPath);
                        }
                    }
                }
            } else {
                result = JFileChooser.CANCEL_OPTION;
            }
        }
        if (result == JFileChooser.APPROVE_OPTION) {
            String ipText = jServerIPField.getText();
            int port = Integer.parseInt(jPortField.getText());
            for (String fileName : selectedFiles) {
                try {
                    SSLSocket downloadSocket = createSSLSocket(ipText, port);
                    File saveFile = new File(selectedDir, fileName);
                    javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
                    int row = model.getRowCount();
                    String dateStr = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new java.util.Date());
                    model.addRow(new Object[]{dateStr, saveFile.getAbsolutePath(), "0%", "Waiting...", "Waiting"});
                    jNoficationArea.append("[" + dateStr + "] Bắt đầu tải file: " + fileName + "\n");
                    DownloadTask task = new DownloadTask(fileName, saveFile, downloadSocket, row, model, jNoficationArea);
                    createDownloadFrame(fileName, task);
                    downloadExecutor.submit(task); // Sử dụng thread pool thay vì start()
                } catch (Exception e) {
                    jNoficationArea.append("Error starting download: " + e.getMessage() + "\n");
                }
            }
        }
    }//GEN-LAST:event_jDownloadButtonActionPerformed

    private void jConnectionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jConnectionMenuItemActionPerformed
        // TODO add your handling code here:
        // Hiển thị jFrame2 khi chọn menu Connection
        jPreferenceFrame.setSize(500, 200); // Đặt kích thước rộng hơn (tùy chỉnh theo ý bạn)
        jPreferenceFrame.setLocationRelativeTo(this);
        jPreferenceFrame.setVisible(true);
    }//GEN-LAST:event_jConnectionMenuItemActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jPathMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPathMenuItemActionPerformed
        if (pathConfigFrame == null) {
            initPathConfigFrame();
        }
        pathTextField.setText(defaultDownloadPath);
        pathConfigFrame.setVisible(true);
    }//GEN-LAST:event_jPathMenuItemActionPerformed

    private void jKeyCAMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jKeyCAMenuItemActionPerformed
        javax.swing.JFrame trustFrame = new javax.swing.JFrame("Cấu hình Truststore");
        trustFrame.setSize(500, 180);
        trustFrame.setResizable(false);
        trustFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        trustFrame.setLocationRelativeTo(this);

        javax.swing.JPanel panel = new javax.swing.JPanel();
        panel.setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gbc = new java.awt.GridBagConstraints();
        gbc.insets = new java.awt.Insets(5, 5, 5, 5);
        gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;

        // Label và field chọn file
        gbc.gridx = 0; gbc.gridy = 0;
        panel.add(new javax.swing.JLabel("Truststore (.jks):"), gbc);
        gbc.gridx = 1;
        javax.swing.JTextField pathField = new javax.swing.JTextField(truststorePath, 25);
        pathField.setEditable(false);
        panel.add(pathField, gbc);
        gbc.gridx = 2;
        javax.swing.JButton browseBtn = new javax.swing.JButton("Browse");
        panel.add(browseBtn, gbc);

        // Label và field nhập password
        gbc.gridx = 0; gbc.gridy = 1;
        panel.add(new javax.swing.JLabel("Password:"), gbc);
        gbc.gridx = 1;
        javax.swing.JPasswordField passField = new javax.swing.JPasswordField(truststorePassword, 25);
        panel.add(passField, gbc);

        // Nút lưu
        gbc.gridx = 1; gbc.gridy = 2;
        javax.swing.JButton saveBtn = new javax.swing.JButton("Lưu");
        panel.add(saveBtn, gbc);

        trustFrame.add(panel);

        browseBtn.addActionListener(e -> {
            JFileChooser chooser = new JFileChooser();
            chooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Java KeyStore Files (*.jks)", "jks"));
            if (chooser.showOpenDialog(trustFrame) == JFileChooser.APPROVE_OPTION) {
                pathField.setText(chooser.getSelectedFile().getAbsolutePath());
            }
        });

        saveBtn.addActionListener(e -> {
            truststorePath = pathField.getText();
            truststorePassword = new String(passField.getPassword());
            trustFrame.dispose();
            javax.swing.JOptionPane.showMessageDialog(this, "Đã lưu cấu hình truststore!", "Thông báo", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        });

        trustFrame.setVisible(true);
    }//GEN-LAST:event_jKeyCAMenuItemActionPerformed

    // Thêm phương thức xử lý sự kiện cho nút Client2Client
    private void jClient2ClientButtonActionPerformed(java.awt.event.ActionEvent evt) {
    
        // Nếu muốn ẩn cửa sổ hiện tại thì bỏ comment dòng dưới:
        // this.setVisible(false);
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        try{
            UIManager.setLookAndFeel(
                UIManager.getSystemLookAndFeelClassName());
        }catch(Exception e){
            
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jConnectButton;
    private javax.swing.JMenuItem jConnectionMenuItem;
    private javax.swing.JButton jDownloadButton;
    private javax.swing.JList<String> jItemList;
    private javax.swing.JMenuItem jKeyCAMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextArea jNoficationArea;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenuItem jPathMenuItem;
    private javax.swing.JTextField jPortField;
    private javax.swing.JFrame jPreferenceFrame;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jServerIPField;
    private javax.swing.JTable jTable1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables

    private SSLSocket createSSLSocket(String ip, int port) throws Exception {
        // Kiểm tra file truststore tồn tại
        File trustFile = new File(truststorePath);
        if (!trustFile.exists()) {
            jNoficationArea.append("Không tìm thấy file truststore: " + truststorePath + "\n");
            throw new Exception("Truststore file not found: " + truststorePath);
        }
        try {
            KeyStore ts = KeyStore.getInstance("JKS");
            try (FileInputStream fis = new FileInputStream(truststorePath)) {
                ts.load(fis, truststorePassword.toCharArray());
            }
            TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
            tmf.init(ts);

            SSLContext ctx = SSLContext.getInstance("TLS");
            ctx.init(null, tmf.getTrustManagers(), null);

            SSLSocketFactory factory = ctx.getSocketFactory();
            SSLSocket sslSocket = (SSLSocket) factory.createSocket(ip, port);
            sslSocket.startHandshake();
            return sslSocket;
        } catch (Exception e) {
            jNoficationArea.append("Error initializing SSL context: " + e.getMessage() + "\n");
            throw e;
        }
    }

    private void createDownloadFrame(String fileName, DownloadTask task) {
        javax.swing.JFrame downloadFrame = new javax.swing.JFrame("Downloading: " + fileName);
        downloadFrame.setSize(500, 250);
        downloadFrame.setResizable(false);
        downloadFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        downloadFrame.setLocationRelativeTo(this);

        // Main panel với padding
        javax.swing.JPanel mainPanel = new javax.swing.JPanel();
        mainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        mainPanel.setLayout(new javax.swing.BoxLayout(mainPanel, javax.swing.BoxLayout.Y_AXIS));

        // File name panel
        javax.swing.JPanel fileNamePanel = new javax.swing.JPanel(new java.awt.BorderLayout());
        javax.swing.JLabel fileNameLabel = new javax.swing.JLabel(fileName);
        fileNameLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 14));
        fileNamePanel.add(fileNameLabel, java.awt.BorderLayout.WEST);
        mainPanel.add(fileNamePanel);
        mainPanel.add(javax.swing.Box.createRigidArea(new java.awt.Dimension(0, 10)));

        // Progress panel
        javax.swing.JPanel progressPanel = new javax.swing.JPanel(new java.awt.BorderLayout(5, 0));
        javax.swing.JProgressBar progressBar = new javax.swing.JProgressBar(0, 100);
        progressBar.setStringPainted(true);
        progressBar.setPreferredSize(new java.awt.Dimension(progressBar.getPreferredSize().width, 25));
        progressBar.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
        progressBar.setForeground(new java.awt.Color(46, 204, 113));
        progressPanel.add(progressBar, java.awt.BorderLayout.CENTER);
        mainPanel.add(progressPanel);
        mainPanel.add(javax.swing.Box.createRigidArea(new java.awt.Dimension(0, 5)));

        // Status panel
        javax.swing.JPanel statusPanel = new javax.swing.JPanel(new java.awt.BorderLayout(5, 0));
        javax.swing.JLabel speedLabel = new javax.swing.JLabel("Speed: 0 KB/s");
        javax.swing.JLabel sizeLabel = new javax.swing.JLabel("Size: 0 KB");
        speedLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
        sizeLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
        statusPanel.add(speedLabel, java.awt.BorderLayout.WEST);
        statusPanel.add(sizeLabel, java.awt.BorderLayout.EAST);
        mainPanel.add(statusPanel);
        mainPanel.add(javax.swing.Box.createRigidArea(new java.awt.Dimension(0, 10)));

        // Buttons panel
        javax.swing.JPanel buttonsPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 0));
        
        javax.swing.JButton pauseButton = new javax.swing.JButton("Pause");
        javax.swing.JButton resumeButton = new javax.swing.JButton("Resume");
        javax.swing.JButton cancelButton = new javax.swing.JButton("Cancel");

        // Set icons for buttons
        try {
            pauseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Client/Assets/pause.png")));
            resumeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Client/Assets/play.png")));
            cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Client/Assets/cancel.png")));
        } catch (Exception e) {
        }

        // Style buttons
        for (javax.swing.JButton button : new javax.swing.JButton[]{pauseButton, resumeButton, cancelButton}) {
            button.setFocusPainted(false);
            button.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            button.setPreferredSize(new java.awt.Dimension(100, 30));
        }

        resumeButton.setEnabled(false);

        buttonsPanel.add(pauseButton);
        buttonsPanel.add(resumeButton);
        buttonsPanel.add(cancelButton);
        mainPanel.add(buttonsPanel);

        downloadFrame.add(mainPanel);
        downloadFrame.setVisible(true);

        pauseButton.addActionListener(e -> task.pauseDownload());
        resumeButton.addActionListener(e -> task.resumeDownload());
        cancelButton.addActionListener(e -> {
            task.cancelDownload();
            downloadFrame.dispose();
            downloadFrames.remove(fileName);
        });

        task.setOnProgress((percent, speed) -> {
            progressBar.setValue(percent);
            progressBar.setString(percent + "%");
            speedLabel.setText(String.format("Speed: %d KB/s", speed/1024));
        });

        task.setOnStatus(status -> {
            if ("Paused".equals(status)) {
                pauseButton.setEnabled(false);
                resumeButton.setEnabled(true);
                progressBar.setForeground(new java.awt.Color(243, 156, 18)); // Orange for paused
            } else if ("Downloading".equals(status)) {
                pauseButton.setEnabled(true);
                resumeButton.setEnabled(false);
                progressBar.setForeground(new java.awt.Color(46, 204, 113)); // Green for active
            } else if ("Complete".equals(status)) {
                progressBar.setForeground(new java.awt.Color(46, 204, 113)); // Keep green for complete
                downloadFrame.dispose();
                downloadFrames.remove(fileName);
            } else if ("Error".equals(status) || "Cancelled".equals(status)) {
                progressBar.setForeground(new java.awt.Color(231, 76, 60)); // Red for error/cancelled
                downloadFrame.dispose();
                downloadFrames.remove(fileName);
            }
        });

        downloadFrames.put(fileName, downloadFrame);
    }

    private void initPathConfigFrame() {
        pathConfigFrame = new javax.swing.JFrame("Download Location Settings");
        pathConfigFrame.setSize(600, 150);
        pathConfigFrame.setResizable(false);
        pathConfigFrame.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        pathConfigFrame.setLocationRelativeTo(this);

        // Main panel with padding
        javax.swing.JPanel mainPanel = new javax.swing.JPanel();
        mainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        mainPanel.setLayout(new java.awt.BorderLayout(5, 10));

        // Path panel
        javax.swing.JPanel pathPanel = new javax.swing.JPanel(new java.awt.BorderLayout(5, 0));
        javax.swing.JLabel pathLabel = new javax.swing.JLabel("Default download location:");
        pathTextField = new javax.swing.JTextField(defaultDownloadPath);
        pathTextField.setEditable(false);
        javax.swing.JButton browseButton = new javax.swing.JButton("Browse...");

        pathPanel.add(pathLabel, java.awt.BorderLayout.NORTH);
        pathPanel.add(pathTextField, java.awt.BorderLayout.CENTER);
        pathPanel.add(browseButton, java.awt.BorderLayout.EAST);

        // Button panel
        javax.swing.JPanel buttonPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        javax.swing.JButton saveButton = new javax.swing.JButton("Save");
        javax.swing.JButton cancelButton = new javax.swing.JButton("Cancel");

        buttonPanel.add(saveButton);
        buttonPanel.add(cancelButton);

        // Add panels to main panel
        mainPanel.add(pathPanel, java.awt.BorderLayout.CENTER);
        mainPanel.add(buttonPanel, java.awt.BorderLayout.SOUTH);

        // Add main panel to frame
        pathConfigFrame.add(mainPanel);

        // Add action listeners
        browseButton.addActionListener(e -> {
            JFileChooser chooser = new JFileChooser(defaultDownloadPath);
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            chooser.setDialogTitle("Choose Default Download Location");
            if (chooser.showDialog(pathConfigFrame, "Select") == JFileChooser.APPROVE_OPTION) {
                pathTextField.setText(chooser.getSelectedFile().getAbsolutePath());
            }
        });

        saveButton.addActionListener(e -> {
            defaultDownloadPath = pathTextField.getText();
            pathConfigFrame.setVisible(false);
            javax.swing.JOptionPane.showMessageDialog(this,
                "Download location has been updated.",
                "Settings Saved",
                javax.swing.JOptionPane.INFORMATION_MESSAGE);
        });

        cancelButton.addActionListener(e -> {
            pathTextField.setText(defaultDownloadPath);
            pathConfigFrame.setVisible(false);
        });
    }
}
// DownloadTask implements Runnable, có retry
class DownloadTask implements Runnable {
    private final String fileName;
    private final java.io.File saveFile;
    private final SSLSocket socket;
    private final int tableRow;
    private final javax.swing.table.DefaultTableModel tableModel;
    private final javax.swing.JTextArea jNoficationArea;
    private volatile boolean running = true;
    private volatile boolean paused = false;
    private volatile boolean cancelled = false;
    private java.util.function.BiConsumer<Integer, Integer> onProgress;
    private java.util.function.Consumer<String> onStatus;
    private static final int MAX_RETRY = 2;

    public DownloadTask(String fileName, java.io.File saveFile, SSLSocket socket, int tableRow,
                       javax.swing.table.DefaultTableModel tableModel, javax.swing.JTextArea jNoficationArea) {
        this.fileName = fileName;
        this.saveFile = saveFile;
        this.socket = socket;
        this.tableRow = tableRow;
        this.tableModel = tableModel;
        this.jNoficationArea = jNoficationArea;
    }
    public void setOnProgress(java.util.function.BiConsumer<Integer, Integer> onProgress) {
        this.onProgress = onProgress;
    }
    public void setOnStatus(java.util.function.Consumer<String> onStatus) {
        this.onStatus = onStatus;
    }
    @Override
    public void run() {
        int attempt = 0;
        while (attempt <= MAX_RETRY) {
            try {
                doDownload();
                return;
            } catch (Exception e) {
                attempt++;
                if (attempt > MAX_RETRY) {
                    updateTable("Error", e.getMessage());
                    updateStatus("Error");
                    jNoficationArea.append("Download failed: " + fileName + " - " + e.getMessage() + "\n");
                    try { socket.close(); } catch (Exception ignored) {}
                } else {
                    jNoficationArea.append("Retry download (" + attempt + "/" + MAX_RETRY + "): " + fileName + "\n");
                }
            }
        }
    }
    private void doDownload() throws Exception {
        java.io.BufferedOutputStream fileOut = null;
        try {
            java.io.OutputStream out = socket.getOutputStream();
            java.io.InputStream in = socket.getInputStream();
            java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(in));
            fileOut = new java.io.BufferedOutputStream(new java.io.FileOutputStream(saveFile));
            // Gửi yêu cầu file
            out.write((fileName + "\n").getBytes());
            out.flush();
            // Đọc dòng đầu tiên: kích thước file
            String sizeLine = reader.readLine();
            if (sizeLine == null || sizeLine.trim().isEmpty() || sizeLine.trim().equals("-1")) {
                updateStatus("Không thể tải file: " + fileName + " (file không tồn tại hoặc server lỗi)");
                if (onStatus != null) onStatus.accept("Lỗi: file không tồn tại hoặc server lỗi");
                if (fileOut != null) try { fileOut.close(); } catch (Exception e) {}
                saveFile.delete();
                throw new Exception("File not found or server error");
            }
            long fileSize;
            try {
                fileSize = Long.parseLong(sizeLine.trim());
                if (fileSize <= 0) throw new NumberFormatException();
            } catch (NumberFormatException e) {
                updateStatus("Không thể tải file: " + fileName + " (kích thước file không hợp lệ)");
                if (onStatus != null) onStatus.accept("Lỗi: kích thước file không hợp lệ");
                if (fileOut != null) try { fileOut.close(); } catch (Exception ex) {}
                saveFile.delete();
                throw new Exception("Invalid file size");
            }
            // Tiếp tục nhận dữ liệu file như cũ
            byte[] buffer = new byte[4096];
            int bytesRead;
            long totalReceived = 0;
            long startTime = System.currentTimeMillis();
            long lastUpdateTime = startTime;
            long lastBytesReceived = 0;
            while (running && totalReceived < fileSize && (bytesRead = in.read(buffer, 0, (int)Math.min(buffer.length, fileSize - totalReceived))) != -1) {
                synchronized (this) {
                    while (paused) {
                        updateStatus("Paused");
                        wait();
                    }
                    if (cancelled) {
                        updateStatus("Cancelled");
                        fileOut.close();
                        socket.close();
                        saveFile.delete();
                        return;
                    }
                }
                fileOut.write(buffer, 0, bytesRead);
                totalReceived += bytesRead;
                // Calculate progress and speed
                int percent = (int)((totalReceived * 100) / fileSize);
                long currentTime = System.currentTimeMillis();
                if (currentTime - lastUpdateTime >= 1000) { // Update every second
                    long timeSpent = currentTime - lastUpdateTime;
                    long bytesInPeriod = totalReceived - lastBytesReceived;
                    int speed = (int)(bytesInPeriod * 1000 / timeSpent); // bytes per second
                    if (onProgress != null) {
                        onProgress.accept(percent, speed);
                    }
                    updateTable(percent + "% of " + (fileSize/1024) + " KB", speed/1024 + " KB/s");
                    lastUpdateTime = currentTime;
                    lastBytesReceived = totalReceived;
                }
            }
            fileOut.close();
            socket.close();
            if (totalReceived == fileSize) {
                updateTable("Complete", "100%");
                updateStatus("Complete");
                jNoficationArea.append("Downloaded: " + fileName + "\n");
            } else {
                updateTable("Incomplete", "Error");
                updateStatus("Error");
                throw new Exception("Download incomplete");
            }
        } catch (Exception e) {
            if (fileOut != null) try { fileOut.close(); } catch (Exception ignore) {}
            saveFile.delete();
            throw e;
        }
    }
    private void updateTable(final String status, final String speed) {
        javax.swing.SwingUtilities.invokeLater(() -> {
            tableModel.setValueAt(status, tableRow, 2); // Size column
            tableModel.setValueAt(speed, tableRow, 3);  // Speed column
        });
    }
    private void updateStatus(final String status) {
        if (onStatus != null) {
            onStatus.accept(status);
        }
        javax.swing.SwingUtilities.invokeLater(() -> {
            tableModel.setValueAt(status, tableRow, 4); // Status column
        });
    }
    public synchronized void pauseDownload() {
        paused = true;
        updateStatus("Paused");
    }
    public synchronized void resumeDownload() {
        paused = false;
        notifyAll();
        updateStatus("Downloading");
    }
    public synchronized void cancelDownload() {
        cancelled = true;
        paused = false;
        notifyAll();
        updateStatus("Cancelled");
    }
}